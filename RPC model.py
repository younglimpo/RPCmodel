#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time      :2020/12/17 9:14
# @Author    :Lingbo Yang
# @Version   :v1.0
# @License: BSD 3 clause
# @Description:
import numpy as np

def cal_p(a,u,v,w):
    p_re = a[0] + a[1] * v + a[2] * u + a[3] * w + a[4] * v * u + a[5] * v * w+ a[6] * u * w + a[7] * v*v + a[8] * u*u +a[9] * w*w + a[10] * v*w*u +  a[11] * v*v*v +  a[12] * v*u*u+a[13] * v * w * w + a[14] * v * v * u + a[15] * u * u * u +a[16] * u * w * w + a[17] * v * v * w + a[18] * u * u * w +a[19] * w * w * w
    return p_re

def cal_nor(a,b,x):
    u = (x - a) / b
    return u

def cal_in_nor(a,b,x):
    u = x * b + a
    return u

if __name__ == '__main__':
    lineNumCoef = np.array([
        -1.298867753373029E-03,
        -2.598426690438755E-01,
        -1.159070315263844E+00,
        +5.835855270741009E-04,
        +2.089019494115222E-03,
        +1.533801635143243E-04,
        +3.684990014555144E-04,
        +6.013058577827315E-03,
        -1.104287708912299E-03,
        -1.773689841444447E-07,
        +9.540719401843378E-04,
        +9.724354590037641E-03,
        -1.354322633367574E-02,
        +1.267632037878391E-05,
        +3.780066787267040E-02,
        +3.910470000263842E-03,
        +5.802482855711305E-05,
        +2.405633629387496E-04,
        -3.679395127820115E-04,
        -2.844423695767216E-08])
    lineDenCoef = np.array([
        +1.000000000000000E+00,
        -3.824144114352211E-03,
        +1.170915411065118E-03,
        -3.315366095697262E-04,
        +1.251798811325246E-02,
        -8.994657474320752E-04,
        +3.170871912902199E-04,
        -3.572626191087921E-02,
        -3.381044838646316E-03,
        -4.994676676907256E-05,
        -1.025677638776312E-07,
        -2.800210734975553E-05,
        +1.260428255101235E-06,
        -8.137147112848301E-09,
        +6.896347283521096E-06,
        +5.187707598324441E-07,
        -4.091711010235597E-11,
        -1.474978214328587E-07,
        +3.514346702273072E-08,
        +5.789098742744319E-12])
    sampNumCoef =np.array([
        +1.338617330277731E-03,
        +1.180224452535299E+00,
        -2.785018872430257E-01,
        +6.277904861294592E-03,
        -2.284809945358167E-04,
        +2.616102269167178E-03,
        -6.130855652621187E-04,
        -4.757351065685114E-03,
        -2.814339417097021E-04,
        +1.201342036441075E-05,
        +2.967166091232423E-04,
        -3.961442496185538E-02,
        -6.360262216404807E-03,
        -3.800399277778689E-05,
        +2.694000742583826E-02,
        +5.196274031465387E-04,
        +9.240774716078632E-06,
        -5.482657828862484E-04,
        -4.222788276741808E-05,
        -1.965739317953430E-07])
    sampDenCoef = np.array([
        +1.000000000000000E+00,
        +4.748332687917688E-04,
        +6.988673708736464E-04,
        -1.130980155341512E-03,
        +2.300317595500157E-02,
        -4.473258807440168E-04,
        +1.468823037370405E-04,
        -5.073980585952725E-02,
        -2.817514378531191E-03,
        -3.756955234706161E-05,
        -2.878833131991072E-06,
        +5.545905591940536E-05,
        +1.221929383860902E-05,
        -2.444181869368269E-07,
        -5.130446606773127E-05,
        -1.766003823147012E-06,
        -1.713509374484159E-07,
        +1.334450272121865E-05,
        +8.349894434506684E-07,
        +1.024709501146593E-07])
    lineOffset = 2457.549483374208194
    sampOffset = 2314.808449437477520
    latOffset = 33.018618904602107
    longOffset = 120.021885005244783
    heightOffset = 9.390485771256134
    lineScale = 2816.000000000000000
    sampScale = 2688.000000000000000
    latScale = 0.241362011962465
    longScale = 0.278467214660736
    heightScale = 2014.416137338317867

    long = 120.034
    lat = 32.967
    height = 10.0
    height = 1.0

    u = cal_nor (latOffset,latScale,lat)
    v = cal_nor (longOffset,longScale,long)
    w = cal_nor (heightOffset,heightScale,height)

    NUM_R = cal_p(lineNumCoef,u,v,w)
    DEN_R = cal_p(lineDenCoef,u,v,w)
    NUM_C = cal_p(sampNumCoef,u,v,w)
    DEN_C = cal_p(sampDenCoef,u,v,w)

    c_cal = NUM_C/DEN_C
    r_cal = NUM_R/DEN_R

    C_p = cal_in_nor(sampOffset,sampScale,c_cal)
    R_p = cal_in_nor(lineOffset,lineScale,r_cal)

    print(C_p,R_p)

